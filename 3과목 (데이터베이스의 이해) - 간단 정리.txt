I. 알고리즘 (자료구조)

1. 트리

- i. 트리 개요
    - 1. 노드 - Branch
    - 2. 근 노드 (Root Node) - 트리 맨 위에 있는 노드
    - 3. Degree - 각 노드에서 뻗어 나온 Branch 수
    - 4. 단말 노드 (Terminal Node) = Left Node - 자식이 하나도 없는 노드, Degree = 0
    - 5. 자식 노드 - 어떤 노드의 다음 레벨의 노드들
    - 6. 부모 노드 - 어떤 노드의 이전 레벨의 노드들
    - 7. 형제 노드 - 동일한 부모를 갖는 노드들
    - 8. 트리의 Degree - 노드들의 Degree 중 가장 많은 수

- ii. 트리 운행법 <A = Root, B = Left, C = Right>
    - 1. Pre-Order (전이, 전위법) - Root -> Left -> Right 
    - 2. In-Order (중이, 중위법) - Left -> Root -> Right
    - 3. Post-Order (후이, 후위법) - Left -> Right -> Root

2. 정렬

- i. 삽입 정렬
    - 1. 순서화 된 파일에 새로운 하나의 Record 를 순서에 맞게 삽입
    - 2. 시간 복잡도 -> O(n2) (O(n 제곱)
    - 3. 예) 8 5 6 2 4 -> 5 8 6 2 4 -> 5 6 8 2 4 -> 2 5 6 8 4 -> 2 4 5 6 

- ii. 선택 정렬
    - 1. 최소 값을 찾아 첫 번째 레코드 위치에 놓고, 나머지 (n - 1)개 중에서 다시 최소 값을 찾아 두 번째 레코드 위치에 놓는 방식
    - 2. 시간 복잡도 -> O(n2) O(n 제곱)
    - 3. 예) 8 5 6 2 4 -> 5 8 6 2 4 -> 2 8 6 5 4 -> 2 6 8 5 4 -> 2 5 8 6 4 -> 2 4 8 6 5 -> 2 4 6 8 5 -> 2 4 5 8 6 -> 2 4 5 6 8 

- iii. 2-Way 합병 정렬
    - 1. 이미 정렬되어 있는 두 개의 파일을 한 개의 파일로 병합
    - 2. 예) 71, 2, 38, 5, 7, 61, 11, 26, 53, 42 -> (2, 71), (5, 38), (7, 61), (11, 26), (53, 42)  -> (2, 5, 38, 71), (11, 26, 42, 53) -> (2, 5, 11, 26, 38, 42, 53, 71)